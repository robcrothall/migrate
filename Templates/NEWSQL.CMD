/* Description:  Reformat SQL statements for new standards        */
/* Usage:        NEWSQL <From-no>                                 */
/*                      <To-no>                                   */
/*                      <New-File-ext>                            */
/*                      <Directory>                               */
/* Files processed:                                               */
/*    Input:     Files containing SQL Data Definition statements. */
/*               File names are in the form SQL.nnn where nnn is  */
/*               a three digit numeric with leading zeros, e.g.:- */
/*                  SQL.001, SQL.002, etc.                        */
/*    Output:    Files containing reformatted and modified SQL    */
/*               statements where all references to old SQL       */
/*               objects is changed to refer to the new names in  */
/*               the form:-                                       */
/*                  XRG??nnn.NSQ       where:-                    */
/*                  XRG    is the prefix indicating CSR tables    */
/*                  ??     indicates the type of file, e.g.:-     */
/*                           DS - define dataspace                */
/*                           TB - create table, etc               */
/*                  nnn    is the table/dbspace no                */

Parse source . . name .;
If arg(1)='?' then do;
SYNTAX:
  Say; Say name; Say;
  Do n = 1 by 1;
    line = sourceline(n);
    If left(line,2) \= '/*' then Exit 1;
  end /* do */
End;

trace n;

ErrCd = 0;
Call SysCls;
arg start stop ft dir rest;

If rest \= '' then do;
  Say 'Wrong number of parameters:' start stop ft dir rest;
  ErrCd = 100;
  signal Parmerror;
End;

n = SETLOCAL();

If dir = '' then dir = 'C:\SQL';
curdir = directory();
newdir = directory(dir);
If newdir \= dir then do;
  Say 'Invalid directory specified:' dir;
  ErrCd = 104;
  signal Parmerror;
End;

If ft = '' then ft = 'NSQ';
If length(ft) > 3 then do;
  Say 'Length of new file extension is greater than 3';
  ErrCd = 108;
  Signal Parmerror;
End;

If datatype(start, whole) = 0 then do;
  Say 'Starting input file number is not valid.';
  ErrCd = 112;
  Signal Parmerror;
End;

If datatype(stop, whole) = 0 then do;
  Say 'Ending file number is not valid.';
  ErrCd = 116;
  Signal Parmerror;
End;

If start > stop then do;
  Say 'Starting file number > Ending file number.';
  ErrCd = 120;
  Signal Parmerror;
End;

Say 'Parameters passed:';
Say '  Start number:   ' start;
Say '  End number:     ' stop;
Say '  No of files:    ' stop - start + 1;
Say '  New file ext:   ' ft;
Say '  Destination Dir:' newdir;
Say '  XCSCNTL passwd: ' ARYE;
Say ''; 
Say 'If you are not satisfied with the above, press <Ctrl>-<Break>';
pull nix;
If nix = 'END' then exit;

/* Load utility functions */
Call RxFuncAdd 'PrxLoadFuncs', 'PRXUTILS', 'PRXLOADFUNCS';
Call PrxLoadFuncs;
Say 'PrxUtils function loaded';
Say PrxUtilsVersion(); 

/* Initialise */
NewTab.   = 0;
IdxDesc.U = 'UNIQUE';
IdxDesc.O = '';

/* Read the table number lookup table       */
LookUp.='';
retcd = PrxReadToStem('NSQL.IDX', 'LookUp');
If LookUp.0 = 'LOOKUP.0' then do;
  Say 'Can not find NSQL.IDX file - run abandoned';
  Exit 1;
End;
LSyn. = '';
LTabNo. = '';
'DEL NEWSQL.IDX';
'DEL NEWSQLXF.BAT';
Do n = 1 to LookUp.0;
  If (word(LookUp.n, 5) = 'R') then do;
    LTab = word(LookUp.n, 4);
    LSys.LTab = word(LookUp.n, 1);
    LSyn.LTab = word(LookUp.n, 2);
    LTabNo.LTab = word(LookUp.n, 7);
  end; /* do */
end; /* do */

Say 'Start of main loop';
Do fn = start to stop;
  Drop rec;
  Drop DirEntry;
  fno = right(fn,3,'0');
  n = SysFileTree('SQL.'||fno, DirEntry, 'FT');
  Say 'Number found:' DirEntry.0;
  If DirEntry.0 = 1 then do;
    Say 'Directory entry:' DirEntry.1;
    retcd = PrxReadToStem('SQL.'||fno, 'rec');
    Say 'Records read:' rec.0;
    I = 1;
    Command = '';
    OldDBsp = '';
    Do while (I <= rec.0);
      rec.I = space(rec.I);
      rec.I = translate(rec.I);
      Select;

        When pos('GRANT', rec.I) > 0 then do;
            Out. = '';
            K = 0;
            Do J = 1 by 1 while (I <= rec.0);
              K = K + 1;
              Out.K = rec.I;
              n = pos(OldTabN, Out.K);
              If n > 0 then do;
                Out.K = delstr(Out.K, n, length(OldTabN));
                Out.K = insert(NewTable, Out.K, n-1);
              End;
              If pos(';', Out.K) > 0 then leave;
              I = I + 1;
            end; /* do */
            retcd = PrxWriteFromStem(newdir||'\'||NewGrant||'.'||ft, 'Out', K, 1, 'Append');
            Drop Out.;
          End;

        When pos('COMMENT ON', rec.I) > 0 then do;
            Out. = '';
            Do K = 1 by 1;
              Out.K = rec.I;
              n = pos(OldTabN, Out.K);
              If n > 0 then do;
                Out.K = delstr(Out.K, n, length(OldTabN));
                Out.K = insert(NewTable, Out.K, n-1);
              End;
              If pos(';', rec.I) > 0 then leave;
              I = I + 1;
            end; /* do */
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewTable||'.'||ft, 'Out', K, 1, 'Append');
            Drop Out.;
          trace n;
          End;

        When (pos('COMMENT', rec.I) < 4) & (pos('COMMENT', rec.I)>0) then nop;

        When wordpos('CREATE TABLE', rec.I) > 0 then do;
            OldTab = word(rec.I, wordpos('TABLE', rec.I)+1);
            parse var OldTab Creator'.'OldTabN;
            If OldTabN = '' then do;
              OldTabN = Creator;
              Creator = 'XCSCNTL';
            End;
            If (Newtab.OldTabN = 0) & (LSys.OldTabN = 'T') then do;
              Newtab.OldTabN = LTabNo.OldTabN;
              Say 'Table number for' OldTabN 'is' NewTab.OldTabN;
            End;
            Else do;
              Say 'Table' OldTabN 'is' LSys.OldTabN 'and is ignored';
              Iterate fn;
            End;
            NewTable   = XRG || 'TB' || right(NewTab.OldTabN, 3, '0');
            NewGrant   = overlay('GR', NewTable, 4);
            NewDBSpace = overlay('DS', NewTable, 4);
            NewDSUnload= overlay('UD', NewTable, 4);
            NewDSReload= overlay('RD', NewTable, 4);
            NewTBUnload= overlay('UT', NewTable, 4);
            NewTBReload= overlay('RT', NewTable, 4);
            NewViews   = overlay('VW', NewTable, 4);
            NewDataLoad= overlay('DL', NewTable, 4);
            NewCVUnload= overlay('CU', NewTable, 4);
            NewCVReload= overlay('CR', NewTable, 4);
            NewCVRex   = overlay('RV', NewTable, 4);
            NewCURex   = overlay('RU', NewTable, 4);
            NewDataUnLoad= overlay('DU', NewTable, 4);
            retcd = SysFileTree(XRG||'??'|| right(NewTab.OldTabN, 3, '0')||'.'||ft, DirDel, 'O');
            If DirDel.0 > 0 then do;
              Say 'The following files will be replaced:-';
              Do n = 1 to DirDel.0;
                Say '  ' DirDel.n;
              end; /* do */
              Say ' ';
              Say 'Type Y to delete; anything else will bypass this source file!';
              Pull nix;
              If nix \= 'Y' then iterate fn;
              Do n = 1 to DirDel.0;
                '@del' DirDel.n;
                Say '  ' DirDel.n 'deleted';
              end /* do */
            End;
            Say 'Table' NewTable 'is ('||Creator||')' OldTabN;
            Command = 'Table';
            Drop Out;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:    Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:    Stakeholders';
            K = K + 1;
            Out.K = '         * Member:    ' || NewTable 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:     ' || Creator || '.' || NewTable;
            K = K + 1;
            Out.K = '         * Old Table: ' || Creator || '.' || OldTabN;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            n = pos('(', rec.I);
            If n = 0 then n = length(rec.I) + 1;
            Out.K = space('CREATE TABLE' Creator ||'.'||NewTable substr(rec.I, n));
            OldDBsp = '';
            Semicolon = 0;
            Do while (Semicolon = 0);
              Semicolon = pos(';', Out.K);
              If Semicolon > 0 then do;
                n = pos(' IN ', Out.K);
                If n > 0 then do;
                  OldDBsp = substr(Out.K, n+4, Semicolon - n - 4);
                  Out.K = left(Out.K, n+3) || NewDBSpace || ';';
                End;            
                Else do;
                  Out.K = left(Out.K, Semicolon - 1) 'IN' NewDBSpace || ';';
                End;
              End;
              Else do;
                I = I + 1;
                K = K + 1;
                Out.K = space(rec.I);
                n = pos('( ', Out.K);
                If n > 0 then Out.K = substr(Out.K, 1, n) || substr(Out.K, n+2);
              End;
            End;
            K = K + 1;
            Out.K = 'SET ERRORMODE OFF;';
            K = K + 1;
            Out.K = 'COMMENT ON TABLE' Creator||'.'|| NewTable 'IS';
            K = K + 1;
            Out.K = '  ''CSR Stakeholders -' OldTabN || ''';';
            /* We have come to the end of the CREATE TABLE statement */
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewTable||'.'||ft, 'Out', K, 1, 'Replace');
            /* Update the NewSQL.IDX to keep track of new tables... */
            Out. = '';
            K = 1;
            Out.K = Creator||'.'||NewTable 'in' NewDBSpace 'was' Creator||'.'||OldTabn 'in' OldDBSp;
            retcd = PrxWriteFromStem(newdir||'\NEWSQL.IDX', 'Out', K, 1, 'Append');
            Out.K = date() time() Out.K;
            retcd = PrxWriteFromStem(newdir||'\NEWSQL.LOG', 'Out', K, 1, 'Append');
            /* Create views... */
            Drop Out;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewViews 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:      ' || Creator ||'.'|| NewTable;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'CREATE VIEW ' OldTabN;
            K = K + 1;
            Out.K = '  AS SELECT * FROM' Creator || '.' || NewTable||';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'SET ERRORMODE OFF;';
            retcd = PrxWriteFromStem(newdir||'\'||NewViews||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewDBSpace 'DBSUIN';
            K = K + 1;
            Out.K = '         * DBSpace:    ' || NewDBSpace;
            K = K + 1;
            Out.K = '         * Old DBSpace:' || OldDBSp;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'DROP DBSPACE' NewDBSpace||';';
            K = K + 1;
            Out.K = 'SET ERRORMODE OFF;';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'ACQUIRE PUBLIC DBSPACE NAMED' NewDBSpace;
            K = K + 1;
            Out.K = '  (PAGES    = 128,';
            K = K + 1;
            Out.K = '   PCTINDEX = 20,';
            K = K + 1;
            Out.K = '   PCTFREE  = 5,';
            K = K + 1;
            Out.K = '   LOCK     = PAGE,';
            K = K + 1;
            Out.K = '   STORPOOL = 4);';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewDBSpace||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewDSUnload 'DBSUIN';
            K = K + 1;
            Out.K = '         * DBSpace:    ' || NewDBSpace;
            K = K + 1;
            Out.K = '         * Old DBSpace:' || OldDBSp;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'UNLOAD DBSPACE(PUBLIC.'||NewDBSpace||') OUTFILE(OUTDD);';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewDSUnload||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewDSReload 'DBSUIN';
            K = K + 1;
            Out.K = '         * DBSpace:    ' || NewDBSpace;
            K = K + 1;
            Out.K = '         * Old DBSpace:' || OldDBSp;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'RELOAD DBSPACE(PUBLIC.'||NewDBSpace||') NEW INFILE(INDD);';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewDSReload||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
DataUnload: Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewDataUnload 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:      ' || NewTable;
            K = K + 1;
            Out.K = '         * Old Table:  ' || OldTabN;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'DATAUNLOAD';
            K = K + 1;
            Out.K = ' SELECT';
            K = K + 1;
            Out.K = ' *** Fill in your column names here ***';
            K = K + 1;
            Out.K = ' FROM' Creator||'.'||NewTable||';';
            K = K + 1;
            Out.K = 'OUTFILE(OUTDD);';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewDataUnload||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewDataLoad 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:      ' || NewTable;
            K = K + 1;
            Out.K = '         * Old Table:  ' || OldTabN;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'DATALOAD TABLE('||Creator||'.'||NewTable||')';
            K = K + 1;
            Out.K = ' *** Select columns here ***';
            K = K + 1;
            Out.K = 'INFILE(INDD);';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewDataLoad||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
TBUnload:   Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewTBUnload 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:      ' || NewTable;
            K = K + 1;
            Out.K = '         * Old Table:  ' || OldTabN;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'UNLOAD TABLE('Creator'.'||NewTable||') OUTFILE(OUTDD);';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewTBUnload||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
TBUnload:   Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewTBUnload 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:      ' || NewTable;
            K = K + 1;
            Out.K = '         * Old Table:  ' || OldTabN;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'UNLOAD TABLE('Creator'.'||OldTabN||') OUTFILE(OUTDD);';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewCVUnload||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewTBReload 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:      ' || NewTable;
            K = K + 1;
            Out.K = '         * Old Table:  ' || OldTabN;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'RELOAD TABLE('||Creator'.'||NewTable||')'
            K = K + 1;
            Out.K = '  NEW('||NewDBSpace||') INTABLE('||NewTable||') INFILE(INDD);';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewTBReload||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewCVReload 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:      ' || NewTable;
            K = K + 1;
            Out.K = '         * Old Table:  ' || OldTabN;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'RELOAD TABLE('||Creator'.'||NewTable||')'
            K = K + 1;
            Out.K = '  NEW('||NewDBSpace||') INTABLE('||OldTabN||') INFILE(INDD);';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            retcd = PrxWriteFromStem(newdir||'\'||NewCVReload||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewGrant 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:      ' || NewTable;
            K = K + 1;
            Out.K = '         * Old Table:  ' || OldTabN;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            Out.K = 'GRANT ALL ON' Creator||'.'||NewTable 'TO';
            K = K + 1;
            Out.K = '  XRGCLC WITH GRANT OPTION;';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'SET ERRORMODE OFF;';
            K = K + 1;
            Out.K = 'GRANT SELECT, INSERT, DELETE, UPDATE ON' OldTabN 'TO';
            K = K + 1;
            Out.K = '  XRGCLC WITH GRANT OPTION;';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'SET ERRORMODE OFF;';
            retcd = PrxWriteFromStem(newdir||'\'||NewGrant||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
          End;

        When wordpos('CONNECT', rec.I) > 0 then nop;

        When wordpos('INDEX', rec.I) > 0 then do;
            If wordpos('UNIQUE', rec.I) > 0 then IType = 'U';
            else IType = 'O';
            OldInd = word(rec.I, wordpos('INDEX', rec.I)+1);
            NewTab.OldTabN.IType = NewTab.OldTabN.IType + 1;
            NewIdxFN = XRG||Itype||NewTab.OldTabN.IType||right(NewTab.OldTabN, 3, '0');
            Say 'Index no:' NewIdxFN 'is' OldInd;
            Command = 'Index';
            Drop Out;
            Out. = '';
            K = 1;
            Out.K = 'COMMENT ''' || copies('*', 60);
            K = K + 1;
            Out.K = '         * Client:     Consolidated Share Registrars Limited';
            K = K + 1;
            Out.K = '         * System:     Stakeholders';
            K = K + 1;
            Out.K = '         * Member:     ' || NewIdxFN 'DBSUIN';
            K = K + 1;
            Out.K = '         * Table:      ' || NewTable;
            K = K + 1;
            Out.K = '         * Old Table:  ' || OldTabN;
            K = K + 1;
            Out.K = '         * Index:      ' || NewIdxFN;
            K = K + 1;
            Out.K = '         ' || copies('*', 60) || ''';';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'CONNECT XCSCNTL IDENTIFIED BY' ARYE||';';
            K = K + 1;
            Out.K = 'SET UPDATE STATISTICS OFF;';
            K = K + 1;
            Out.K = 'SET AUTOCOMMIT OFF;';
            K = K + 1;
            Out.K = 'SET ISOLATION CS;';
            K = K + 1;
            n = pos('(', rec.I);
            If n = 0 then n = length(rec.I) + 1;
            Out.K = 'CREATE' IdxDesc.IType 'INDEX' NewIdxFN 'ON' Creator||'.'||NewTable substr(rec.I, n);
            Semicolon = 0;
            Do while (pos(';', Out.K) = 0);
              I = I + 1;
              K = K + 1;
              Out.K = space(rec.I);
            End;
            /* We have come to the end of the CREATE INDEX statement */
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'SET ERRORMODE OFF;';
            retcd = PrxWriteFromStem(newdir||'\'||NewIdxFN||'.'||ft, 'Out', K, 1, 'Replace');
            Drop Out.;
          End;

        When wordpos('VIEW', rec.I) > 0 then do;
            Out. = '';
            OldFullName = Creator||'.'||OldTabN;
            NewFullName = Creator||'.'||NewTable;
            n = wordpos('VIEW', rec.I);
            ViewName = word(rec.I, n+1);
            Do K = 1 by 1;
              Out.K = rec.I;
              n = pos(OldFullName, Out.K);
              If n > 0 then do;
                Out.K = delstr(Out.K, n, length(OldFullName));
                Out.K = insert(NewFullName, Out.K, n-1);
              End;
              n = pos(' ' || OldTabN || ';', Out.K);
              If n > 0 then do;
                Out.K = delstr(Out.K, n+1, length(OldTabN));
                Out.K = insert(NewFullName, Out.K, n);
              End;
              If pos(';', rec.I) > 0 then leave;
              I = I + 1;
            end; /* do */
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'SET ERRORMODE OFF;';
            retcd = PrxWriteFromStem(newdir||'\'||NewViews||'.'||ft, 'Out', K, 1, 'Append');
            Drop Out.;
            Out. = '';
            K = 1;
            Out.K = 'GRANT SELECT ON' ViewName 'TO PUBLIC;';
            K = K + 1;
            Out.K = 'COMMIT WORK;';
            K = K + 1;
            Out.K = 'SET ERRORMODE OFF;';
            retcd = PrxWriteFromStem(newdir||'\'||NewGrant||'.'||ft, 'Out', K, 1, 'Append');
            Drop Out.;
          End;

        Otherwise;
          Say 'Ignored:' rec.I;
      End;
      I = I + 1;
    End;
  End;
  /* Now we can append the UPDATE STATISTICS statement to the CREATE INDEX... */
  Drop Out;
  Out. = '';
  K = 1;
  Out.K = 'SET ERRORMODE OFF;';
  K = K + 1;
  Out.K = 'UPDATE ALL STATISTICS FOR TABLE' Creator||'.'||NewTable||';';
  K = K + 1;
  Out.K = 'COMMIT WORK;';
  retcd = PrxWriteFromStem(newdir||'\'||NewIdxFN||'.'||ft, 'Out', K, 1, 'Append');
  Drop Out.;
  /* Generate an Exec which will unload the table */
  Out. = '';
  K = 1;
  Out.K = ' /* Unload' Creator||'.'||OldTabN 'for conversion to' NewTable '*/';
  K = K + 1;
  Out.K = '''cp sp con start to xcsarjc'';';
  K = K + 1;
  Out.K = '''zcsdsql'';';
  K = K + 1;
  Out.K = '''csrdbsu' NewCVUnload 'DBSUIN *'';';
  K = K + 1;
  Out.K = '''cp sp con close'';';
  retcd = PrxWriteFromStem(newdir||'\'||NewCURex||'.'||ft, 'Out', K, 1, 'Replace');
  Out. = '';
  K = 1;
  Out.K = ' /* Reload' Creator||'.'||OldTabN 'to' NewTable '*/';
  K = K + 1;
  Out.K = '''zsqlwel'';';
  K = K + 1;
  Out.K = '''csrdbsu' NewDBSpace 'DBSUIN *'';';
  K = K + 1;
  Out.K = '''csrdbsu' NewCVReload 'DBSUIN *'';';
  K = K + 1;
  Out.K = '''csrdbsu' NewViews 'DBSUIN *'';';
  K = K + 1;
  Out.K = '''csrdbsu' NewGrant 'DBSUIN *'';';
  Do n = 1 to NewTab.OldTabN.U;
    K = K + 1;
    Out.K = '''csrdbsu' XRG||'U'||right(n, 1)||right(NewTable, 3, '0') 'DBSUIN *'';';
  end /* do */
  Do n = 1 to NewTab.OldTabN.O;
    K = K + 1;
    Out.K = '''csrdbsu' XRG||'O'||right(n, 1)||right(NewTable, 3, '0') 'DBSUIN *'';';
  end /* do */
  retcd = PrxWriteFromStem(newdir||'\'||NewCVRex||'.'||ft, 'Out', K, 1, 'Replace');
  Drop Out.;
  /* NewIdxFN = XRG||Itype||NewTab.OldTabN.IType||right(NewTab.OldTabN, 3, '0'); */
  /* Now we can generate commands that will transfer the new files to VM/SP */
  Out. = '';
  retcd = SysFileTree(XRG||'??'|| right(NewTab.OldTabN, 3, '0')||'.'||ft, DirDel, 'O');
  VMft = 'DBSUIN';
  VMfm = 'A';
  K = 1;
  Out.K = 'Echo' date() time() 'Transfer of table' NewTable '('||OldTabN||') -' DirDel.0 'files';
  If DirDel.0 > 0 then do n = 1 to DirDel.0;
    Parse var DirDel.n .'\'.'\'VMfn'.'.;
    K = K + 1;
    If (VMfn = NewCVRex) | (VMfn = NewCURex) then do;
      Out.K = '\DIAL28\SEND' DirDel.n VMfn 'EXEC' VMfm '(ASCII CRLF';
    End;
    else do;
      Out.K = '\DIAL28\SEND' DirDel.n VMfn VMft VMfm '(ASCII CRLF';
    End;
  end; /* do */
  retcd = PrxWriteFromStem(newdir||'\NEWSQLXF.BAT', 'Out', K, 1, 'Append');
  Say 'End of table' NewTable;
End; /* do... */
Say 'End of main loop';

NormalEnd:
Say 'Processing ended normally';
Signal PgmEnd;

Parmerror:
Say 'Syntax is: NEWSQL Start-no Stop-no filetype directory';
Signal PgmEnd;

PgmEnd:
n = ENDLOCAL();
Exit ErrCd;
